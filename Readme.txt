Why did I choose to implement Adapter patter instead of Bridge pattern?

The major reason for choosing Adapter pattern is its intent matches what we're trying to achieve in this assignment. Specifically, we have an existing collection of code following the dom::Node interface, and we would like to let our client use a completely different collection of code following the different XERCES::DOMNode interface. Even though they attempt to perform the same functionality, the two hierarachies of interface are incompatible of each other; therefore, we need to use the Adapter pattern to convert XERCES::DOMNode interface into something dom::Node understands.

Also, both XERCES:: and DOM:: are designs which already exist, meaning we're not in the design phase still, to incorporate the idea of letting abstractions and implementations vary independently. For that, Bridge pattern does a better job, by letting different ConcreteImplementors (relatively the dom::Document, dom::Element...) to implement the same set of core functions defined by the Implementor (relatively dom::Node) differently; which also emphasizes on the SAME set of functions for Abstraction's use, not for providing additional functionalities.